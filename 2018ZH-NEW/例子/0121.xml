<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int sensorBound = 25;
const int collideBound = 3;
const int completeBound = 25;
const int vmax = 4;

int positionXRobot = 0;
int positionYRobot = 0;
int targetX = 20;
int targetY = 20;
int positionXOb = 15;
int positionYOb = 10;
int velocityXRobot = 2;
int velocityYRobot = 2;
int velocityXOb = -1;
int velocityYOb = 0;
int accXRobot = 0;
int accYRobot = 0;
int distance = 1000;
int target = 1000;
//bool flag = false;

void updateDiscrete(){
    //discrete variables update
    velocityXRobot = velocityXRobot + accXRobot;
    velocityYRobot = velocityYRobot + accYRobot;
    positionXRobot = positionXRobot + velocityXRobot;
    positionYRobot = positionYRobot + velocityYRobot;

    positionXOb = positionXOb + velocityXOb;
    positionYOb = positionYOb + velocityYOb;
    
    distance = (positionXRobot - positionXOb)* (positionXRobot - positionXOb) + (positionYRobot - positionYOb)* (positionYRobot - positionYOb);
    target = (positionXRobot - targetX)* (positionXRobot - targetX) + (positionYRobot - targetY)* (positionYRobot - targetY);
}

hybrid clock rvelocityXRobot;
hybrid clock rvelocityYRobot;
hybrid clock rDistance;
hybrid clock cost;

void resetDiscrete(){
    positionXRobot = 0;
    positionYRobot = 0;
    targetX = 20;
    targetY = 20;
    positionXOb = 15;
    positionYOb = 10;
    velocityXRobot = 2;
    velocityYRobot = 2;
    velocityXOb = -1;
    velocityYOb = 0;
    accXRobot = 0;
    accYRobot = 0;
    distance = 1000;
    target = 1000; 
    cost = 0;
   // flag = false;   
}

void eliminateAcc(){
    accXRobot = 0;
    accYRobot = 0;
}

broadcast chan task_req;
broadcast chan task_find;
broadcast chan task_unf;
broadcast chan task_com;
broadcast chan collide;
broadcast chan completed;
broadcast chan faraway;
broadcast chan safe;
broadcast chan action;
broadcast chan chooseRobot;

clock waitTimer;
clock time;

</declaration>
	<template>
		<name>User</name>
		<location id="id0" x="-170" y="-102">
			<name x="-180" y="-136">Idle</name>
			<label kind="exponentialrate" x="-204" y="-110">10</label>
		</location>
		<location id="id1" x="-42" y="-102">
			<name x="-52" y="-136">Request</name>
		</location>
		<location id="id2" x="110" y="-102">
			<name x="100" y="-136">Complete</name>
			<urgent/>
		</location>
		<init ref="id0"/>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-127" y="-76">collide?</label>
			<nail x="-102" y="-34"/>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-144" y="-204">task_unf?</label>
			<nail x="-42" y="-119"/>
			<nail x="-42" y="-187"/>
			<nail x="-170" y="-187"/>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id0"/>
			<nail x="110" y="0"/>
			<nail x="-170" y="0"/>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="0" y="-119">task_com?</label>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-136" y="-119">task_req!</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Sensor</name>
		<declaration>// Place local declarations here.</declaration>
		<location id="id3" x="-51" y="-59">
			<name x="-76" y="-42">Scanning</name>
			<committed/>
		</location>
		<location id="id4" x="-51" y="-255">
			<name x="-68" y="-289">Safe</name>
		</location>
		<location id="id5" x="-263" y="-59">
			<name x="-348" y="-68">Completed</name>
		</location>
		<location id="id6" x="170" y="-59">
			<name x="187" y="-68">SensorBound</name>
		</location>
		<location id="id7" x="-51" y="136">
			<name x="-68" y="144">Collide</name>
		</location>
		<location id="id8" x="-263" y="-161">
			<name x="-279" y="-195">Faraway</name>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id8"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-204" y="-136">chooseRobot?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id8"/>
			<label kind="guard" x="-348" y="-153">positionXRobot &gt; 24 |
positionYRobot &gt; 24</label>
			<label kind="synchronisation" x="-348" y="-119">faraway!</label>
			<label kind="assignment" x="-348" y="-102">resetDiscrete()</label>
			<nail x="-263" y="-119"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-221" y="-76">chooseRobot?</label>
			<label kind="assignment" x="-221" y="-59">eliminateAcc()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="-255" y="-17">target &lt;= completeBound</label>
			<label kind="synchronisation" x="-255" y="0">completed!</label>
			<label kind="assignment" x="-255" y="17">resetDiscrete()</label>
			<nail x="-263" y="17"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-93" y="76">chooseRobot?</label>
			<label kind="assignment" x="-93" y="59">eliminateAcc()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id7"/>
			<label kind="guard" x="-25" y="-17">distance &lt;= collideBound &amp;&amp;
target &gt; completeBound</label>
			<label kind="synchronisation" x="-25" y="17">collide!</label>
			<label kind="assignment" x="-25" y="34">resetDiscrete()</label>
			<nail x="34" y="136"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="17" y="-76">chooseRobot?</label>
			<label kind="assignment" x="17" y="-59">eliminateAcc()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="guard" x="17" y="-204">(distance &lt;= sensorBound &amp;&amp;
distance &gt;collideBound &amp;&amp;
target &gt; completeBound) | 
(velocityXRobot ==0 &amp;&amp;
velocityYRobot ==0)</label>
			<label kind="synchronisation" x="17" y="-110">action!</label>
			<nail x="170" y="-136"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-93" y="-178">chooseRobot?</label>
			<label kind="assignment" x="-93" y="-161">eliminateAcc()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-306" y="-263">distance &gt; sensorBound &amp;&amp;
target &gt; completeBound &amp;&amp;
(velocityXRobot != 0 | velocityYRobot !=0)</label>
			<label kind="synchronisation" x="-306" y="-204">safe!</label>
			<nail x="-136" y="-255"/>
		</transition>
	</template>
	<template>
		<name>Actuator</name>
		<location id="id9" x="-263" y="-17">
			<name x="-289" y="-51">Steady</name>
		</location>
		<location id="id10" x="-68" y="-17">
			<name x="-127" y="-51">Choose</name>
			<committed/>
		</location>
		<location id="id11" x="119" y="-17">
			<name x="136" y="-25">Wait</name>
			<label kind="invariant" x="109" y="0">cost' == 1</label>
		</location>
		<location id="id12" x="-68" y="-204">
			<name x="-78" y="-238">Accelerate</name>
			<label kind="invariant" x="-51" y="-212">cost' == 2</label>
		</location>
		<location id="id13" x="-68" y="161">
			<name x="-76" y="178">Decelerate</name>
			<label kind="invariant" x="-153" y="153">cost' == 2</label>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-229" y="-17">collide?</label>
			<label kind="assignment" x="-229" y="-59">accXRobot = 0,
accYRobot = 0</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-42" y="144">action?</label>
			<nail x="17" y="161"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="102" y="-68">action?</label>
			<nail x="119" y="-93"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-136" y="-221">action?</label>
			<nail x="-153" y="-204"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-280" y="8">action?</label>
			<nail x="-263" y="59"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="guard" x="-68" y="-153">velocityXRobot &lt;= vmax &amp;&amp;
velocityYRobot &lt;= vmax</label>
			<label kind="assignment" x="-68" y="-119">accXRobot = 1,
accYRobot = 1</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="assignment" x="-34" y="-17">velocityXRobot = 0,
velocityYRobot = 0,
accXRobot = 0,
accYRobot = 0</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id13"/>
			<label kind="guard" x="-170" y="59">velocityXRobot &gt; 0 &amp;&amp;
velocityYRobot &gt; 0</label>
			<label kind="assignment" x="-170" y="93">accXRobot = -1,
accYRobot = -1</label>
		</transition>
	</template>
	<template>
		<name>Obstacle</name>
		<location id="id14" x="-42" y="8">
			<name x="-59" y="17">Out</name>
			<label kind="invariant" x="-85" y="-25">positionXOb &gt; 0</label>
			<label kind="exponentialrate" x="-85" y="0">500</label>
		</location>
		<location id="id15" x="127" y="102">
			<name x="117" y="68">Stop</name>
		</location>
		<init ref="id14"/>
		<transition controllable="false">
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="17" y="102">completed?</label>
			<nail x="68" y="144"/>
		</transition>
		<transition controllable="false">
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="34" y="8">collide?</label>
			<nail x="178" y="34"/>
		</transition>
		<transition controllable="false">
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="17" y="153">faraway?</label>
			<nail x="51" y="204"/>
		</transition>
		<transition controllable="false">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="guard" x="17" y="42">positionXOb == 1</label>
			<label kind="assignment" x="17" y="59">velocityXOb = 0</label>
		</transition>
	</template>
	<template>
		<name>Monitor</name>
		<location id="id16" x="-680" y="-323">
			<name x="-690" y="-357">Idle</name>
			<committed/>
		</location>
		<location id="id17" x="-552" y="-323">
			<name x="-562" y="-357">Counting</name>
			<label kind="invariant" x="-645" y="-306">rvelocityXRobot' == accXRobot &amp;&amp;
rvelocityYRobot' == accYRobot &amp;&amp;
rDistance' == distance</label>
		</location>
		<init ref="id16"/>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
		</transition>
	</template>
	<template>
		<name>System</name>
		<location id="id18" x="-212" y="-25">
			<name x="-238" y="-59">RobotNext</name>
			<urgent/>
		</location>
		<location id="id19" x="34" y="-25">
			<name x="17" y="-59">Done</name>
			<urgent/>
		</location>
		<location id="id20" x="-85" y="93">
			<name x="-102" y="59">Wait</name>
			<label kind="invariant" x="-127" y="110">waitTimer &lt;= 1</label>
		</location>
		<init ref="id18"/>
		<transition controllable="false">
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-127" y="-51">chooseRobot!</label>
		</transition>
		<transition controllable="false">
			<source ref="id20"/>
			<target ref="id18"/>
			<label kind="guard" x="-272" y="25">waitTimer == 1</label>
			<label kind="assignment" x="-255" y="42">updateDiscrete()</label>
		</transition>
		<transition controllable="false">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="assignment" x="-25" y="42">waitTimer = 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Sensor,Actuator,Obstacle,Monitor,System;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>//关于完成任务的验证</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] Sensor.Completed</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy complete = control: A[] Sensor.Completed</formula>
			<comment>生成一定能完成任务的策略</comment>
		</query>
		<query>
			<formula>//关于无碰撞的验证</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] distance &gt; 3</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy safe = control: A[] not Sensor.Collide</formula>
			<comment>生成无碰撞的策略——两次wait操作</comment>
		</query>
		<query>
			<formula>A[] not Sensor.Collide under safe</formula>
			<comment></comment>
		</query>
		<query>
			<formula>//关于cost的验证</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=50] {cost}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] cost &lt; 500</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy economy = minE (cost) [&lt;=20]: &lt;&gt; not Sensor.Collide</formula>
			<comment>是否全局都满足机器人到障碍物的距离大于碰撞范围（3）</comment>
		</query>
		<query>
			<formula>//变量的观测</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=50] {distance,target}</formula>
			<comment>突变的情况是由于发生碰撞或到达任务点后系统执行resetDiscrete()进行变量初始化</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=50] {positionXRobot,positionYRobot}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=50] {velocityXRobot,rvelocityXRobot}</formula>
			<comment>因在系统状态迁移过程中，resetDiscrete()的执行使连续变量离散变量总体不同步，但局部变化趋势是一致的</comment>
		</query>
	</queries>
</nta>
